import os

import pandas
import plotly.express as px


def merge_data(
    columbus_data: str = "Columbus/summary.txt",
    cellprofiler_data: str = "CellProfiler/summary.csv",
) -> pandas.DataFrame:
    """
    Benchmarking function to compare the results of two different image
    analysis software tools.

    Parameters
    ----------
    columbus_data : str
        Path to the summary file generated by Columbus.
    cellprofiler_data : str
        Path to the summary file generated by CellProfiler.

    Returns
    -------
    pandas.DataFrame
        Merged data frame containing the results of both software tools.
    """
    # Read the data from the summary files
    columbus = pandas.read_csv(columbus_data, sep="\t", index_col=2)
    cellprofiler = pandas.read_csv(cellprofiler_data, index_col=0)

    # Combine data from both software tools
    merged = columbus.join(cellprofiler, how="inner")
    merged.columns = [
        "Row",
        "Column",
        r"TotalCells_{C}",
        r"InfectedCells_{C}",
        r"InfectionRate_{C}",
        r"MedianSpotsPerInfectedCell_{C}",
        "NumberOfAnalyzedFields",
        "WellURL",
        r"TotalCells_{CP}",
        r"TotalSpots_{CP}",
        r"InfectedCells_{CP}",
        r"InfectionRate_{CP}",
        r"MedianSpotsPerInfectedCell_{CP}",
    ]

    # Drop unnecessary columns
    merged.drop(columns=["NumberOfAnalyzedFields", "WellURL"], inplace=True)

    # Convert Infection Rate for Columbus to percentage
    merged[r"InfectionRate_{C}"] = merged[r"InfectionRate_{C}"] * 100

    return merged


def _plot_scatter(
    merged: pandas.DataFrame,
    x: str,
    y: str,
    title: str,
    output_filepath: str,
    lim: list,
) -> None:
    """
    Plot a scatter plot of the results from both software tools.

    Parameters
    ----------
    merged : pandas.DataFrame
        Merged data frame containing the results of both software tools.
    x : str
        Column name for the x-axis.
    y : str
        Column name for the y-axis.
    title : str
        Title of the plot.
    output_filepath : str
        Path to the output file.
    lim : list
        Limits for the x- and y-axis.
    """
    fig = px.scatter(
        merged,
        x=x,
        y=y,
        labels={
            x: "Columbus",
            y: "CellProfiler",
        },
        hover_name=merged.index,
        hover_data={
            x: ":.1f",
            y: ":.1f",
        },
        marginal_x="histogram",
        marginal_y="histogram",
        trendline="ols",
        height=1200,
        width=1200,
        range_x=lim,
        range_y=lim,
    )

    # Add a diagonal line
    fig.add_shape(
        type="line",
        x0=lim[0],
        y0=lim[0],
        x1=lim[1],
        y1=lim[1],
        line=dict(color="Red", dash="dash"),
    )

    # Update the layout
    fig.update(
        layout=dict(
            title={"text": f"{title}", "x": 0.5},
        )
    )

    fig.write_html(output_filepath)


def run():
    """
    Main function to run the benchmarking analysis.
    """
    # Merge data from Columbus and CellProfiler
    merged = merge_data()

    # Create the comparison directory
    os.makedirs("comparison", exist_ok=True)

    # Plot the scatter plot for the infection rate
    _plot_scatter(
        merged,
        "TotalCells_{C}",
        "TotalCells_{CP}",
        "Number of cells",
        "comparison/number_of_cells.html",
        lim=[0, 1000],
    )

    # Plot the scatter plot for the infection rate
    _plot_scatter(
        merged,
        "InfectionRate_{C}",
        "InfectionRate_{CP}",
        "Infection Rate (%)",
        "comparison/infection_rate.html",
        lim=[0, 100],
    )

    # Plot the scatter plot for the median spots per infected cell
    _plot_scatter(
        merged,
        "MedianSpotsPerInfectedCell_{C}",
        "MedianSpotsPerInfectedCell_{CP}",
        "Median Spots per Infected Cell",
        "comparison/median_spots_per_infected_cell.html",
        lim=[0, 100],
    )


if __name__ == "__main__":
    run()
